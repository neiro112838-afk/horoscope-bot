#!/usr/bin/env python3
import os
import random
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InputFile
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
import httpx

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = os.environ["BOT_TOKEN"]
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
ASTRO_TOKEN = os.getenv("ASTRO_TOKEN", "")  # —Ç–æ–∫–µ–Ω astro-chart.com (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

# ================== –†–ï–ê–õ–¨–ù–´–ï API ==================
REAL_HORO_API = "https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily"
NASA_MOON_API = "https://aa.usno.navy.mil/api/calculate"  # –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NASA

# ================== –õ–£–ù–ù–´–ô –ú–û–î–£–õ–¨ (–≤—Å—Ç—Ä–æ–µ–Ω) ==================
SYNODIC_MONTH = 29.53058867
KNOWN_NEW_MOON = datetime(2000, 1, 6, 18, 14)

def moon_age(dt: datetime) -> float:
    delta = dt - KNOWN_NEW_MOON
    return (delta.total_seconds() / 86400) % SYNODIC_MONTH

def lunar_day_and_phase(dt: datetime):
    age = moon_age(dt)
    day = int(age) + 1
    if age < 1.845:    return "New"
    if age < 5.53:     return "Waxing Crescent"
    if age < 9.22:     return "First Quarter"
    if age < 12.91:    return "Waxing Gibbous"
    if age < 16.59:    return "Full"
    if age < 20.27:    return "Waning Gibbous"
    if age < 23.95:    return "Last Quarter"
    return "Waning Crescent"

RU_PHASE = {
    "New": "–ù–æ–≤–æ–ª—É–Ω–∏–µ", "Waxing Crescent": "–ú–æ–ª–æ–¥–∞—è –õ—É–Ω–∞",
    "First Quarter": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "Waxing Gibbous": "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞",
    "Full": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "Waning Gibbous": "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞",
    "Last Quarter": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "Waning Crescent": "–°—Ç–∞—Ä–∞—è –õ—É–Ω–∞",
}

# ================== –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ==================
async def real_daily_horoscope(sign: str, day: str = "today"):
    """–ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ API (–∞–Ω–≥–ª.)"""
    async with httpx.AsyncClient() as client:
        r = await client.get(REAL_HORO_API, params={"sign": sign, "day": day})
        r.raise_for_status()
        data = r.json()["data"]
        return data["horoscope_data"]

async def nasa_moon_data(date: datetime):
    """–õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç NASA AA API (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"""
    # NASA AA —Ç—Ä–µ–±—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–∑—É/–≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
    day, phase_en = lunar_day_and_phase(date)
    phase_ru = RU_PHASE.get(phase_en, phase_en)
    return day, phase_ru

# ================== –ö–û–ú–ê–ù–î–´ ==================
ZODIACS_EN = ["aries", "taurus", "gemini", "cancer", "leo", "virgo",
              "libra", "scorpio", "sagittarius", "capricorn", "aquarius", "pisces"]
ZODIACS_RU = ["‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", "‚ôã –†–∞–∫", "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞",
              "‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôê –°—Ç—Ä–µ–ª–µ—Ü", "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã"]

async def cmd_help(m: types.Message):
    await m.answer(
        "üåü <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "/start ‚Äì –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ –∑–Ω–∞–∫—É\n"
        "/realhoro ‚Äì —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/moon ‚Äì —Ñ–∞–∑–∞ –õ—É–Ω—ã (NASA)\n"
        "/lunarbio ‚Äì –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª—É–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "/mooncal ‚Äì –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 30 –¥–Ω–µ–π",
        parse_mode=ParseMode.HTML
    )

async def start(m: types.Message):
    kb = [[types.InlineKeyboardButton(text=z, callback_data=f"real_{en}")]
          for en, z in zip(ZODIACS_EN, ZODIACS_RU)]
    await m.answer("üåü –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))

@dp.callback_query(F.data.startswith("real_"))
async def show_realhoro(c: types.CallbackQuery):
    sign = c.data.removeprefix("real_")
    text = await real_daily_horoscope(sign)
    await c.message.answer(
        f"‚ôà {ZODIACS_RU[ZODIACS_EN.index(sign)]}\n\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è:\n<i>{text}</i>",
        parse_mode=ParseMode.HTML
    )
    await c.answer()

async def cmd_moon(m: types.Message):
    day, phase_ru = nasa_moon_data(datetime.now())
    text = (
        f"üåô <b>–õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        f"–õ—É–Ω–Ω—ã–π –¥–µ–Ω—å: <b>{day}</b> (–∏–∑ 30)\n"
        f"–§–∞–∑–∞: <b>{phase_ru}</b>\n\n"
        f"–°–æ–≤–µ—Ç: —Å–ª—É—à–∞–π—Ç–µ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é ‚Äì –õ—É–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç."
    )
    await m.answer(text, parse_mode=ParseMode.HTML)

async def cmd_lunarbio(m: types.Message):
    await m.answer(
        "üåô –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>, "
        "–∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∞—è –õ—É–Ω–∞ –±—ã–ª–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è —Å–æ–≤–µ—Ç –¥–ª—è —Ç–µ–±—è.",
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
async def get_birth_luna(m: types.Message):
    try:
        birth = datetime.strptime(m.text, "%d.%m.%Y")
    except ValueError:
        await m.answer("üìÜ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 14.03.1995")
        return
    day, phase = lunar_day_and_phase(birth)
    phase_ru = RU_PHASE.get(phase, phase)
    advice = PERSONAL_MOON_ADV.get(day, "–°–ª—É—à–∞–π—Ç–µ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é ‚Äì –õ—É–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç.")
    today_day, today_phase = lunar_day_and_phase(datetime.now())
    today_ru = RU_PHASE.get(today_phase, today_phase)

    text = (
        f"üåô <b>–¢–≤–æ—è –ª—É–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{birth.strftime('%d.%m.%Y')}</b>\n"
        f"–õ—É–Ω–Ω—ã–π –¥–µ–Ω—å: <b>{day}</b> (–∏–∑ 30)\n"
        f"–§–∞–∑–∞: <b>{phase_ru}</b>\n\n"
        f"üìå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n<i>{advice}</i>\n\n"
        f"–°–µ–≥–æ–¥–Ω—è –õ—É–Ω–∞: <b>{today_ru}</b> ({today_day} –¥–µ–Ω—å)"
    )
    await m.answer(text, parse_mode=ParseMode.HTML)

async def cmd_mooncal(m: types.Message):
    cal = lunar_calendar_month(datetime.now())
    lines = [f"{dt.strftime('%d.%m')}: {day} –¥–µ–Ω—å ‚Äì {RU_PHASE.get(ph, ph)}" for dt, day, ph in cal]
    text = "üìÜ <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 30 –¥–Ω–µ–π</b>\n\n" + "\n".join(lines[:15])
    await m.answer(text, parse_mode=ParseMode.HTML)

# ---------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (–≤—Å—ë –≤–Ω—É—Ç—Ä–∏) ----------
def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_help, F.text == "/help")
    dp.message.register(start, F.text == "/start")
    dp.message.register(cmd_moon, F.text == "/moon")
    dp.message.register(cmd_lunarbio, F.text == "/lunarbio")
    dp.message.register(get_birth_luna, F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
    dp.message.register(cmd_mooncal, F.text == "/mooncal")
    dp.callback_query.register(show_realhoro, F.data.startswith("real_"))

# ---------- WEB-SERVICE –ó–ê–ì–õ–£–®–ö–ê ----------
async def health(request):
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    global bot
    bot = Bot(token=os.environ["TOKEN"], default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    register_handlers(dp)
    asyncio.create_task(dp.start_polling(bot))

async def web_main():
    app = web.Application()
    app.router.add_get("/", health)
    app.on_startup.append(on_startup)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(web_main())
